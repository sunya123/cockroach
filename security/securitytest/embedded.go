// Code generated by go-bindata.
// sources:
// ../../resource/test_certs/ca.crt
// ../../resource/test_certs/ca.key
// ../../resource/test_certs/node.crt
// ../../resource/test_certs/node.key
// ../../resource/test_certs/root.crt
// ../../resource/test_certs/root.key
// ../../resource/test_certs/testuser.crt
// ../../resource/test_certs/testuser.key
// DO NOT EDIT!

package securitytest

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _test_certsCaCrt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x94\x4b\xd3\xb2\x36\x1c\xc5\xf7\x7c\x8a\xee\x9d\x0e\x02\xe2\x65\xd1\x45\x42\x22\x72\x09\x10\x08\x97\xb8\x13\x44\x50\x40\x04\x11\xd4\x4f\x5f\xde\x67\xd1\x99\xb6\x6f\x56\xc9\x99\xe4\xcc\x3f\xf3\x3b\x73\xfe\xfc\xb5\x20\xd6\x0d\xe7\x0f\x0d\xfb\xcc\xd8\x1b\x1a\x60\xf8\x47\x15\x88\x61\x20\xf8\xd5\x34\x90\x2f\x0a\x30\x19\x10\x14\x86\x0f\xac\xea\xa2\x26\xad\x4e\x73\x97\x59\xa6\x76\xe9\xa8\xf4\x74\xa4\x69\x42\x94\x9b\x56\x7b\x34\xca\x31\x73\x00\xc5\x36\xa4\x60\x12\xac\x2f\x0e\x08\x04\x3a\x90\x42\xac\x95\xc4\xa4\xf2\xee\x76\x52\xcc\x91\xc7\x4e\x4b\xfc\x70\xc2\x13\x47\x11\xa5\x08\x4f\x6f\x94\xca\x4e\x9f\x35\xbb\x92\xcb\x45\x41\x97\x78\x3a\x94\x99\x23\x10\xc6\x27\xf2\x25\x13\x61\xd9\xc7\x41\xe1\x2a\x9e\xc5\x79\xff\x6f\xed\x06\x7a\xe2\x1b\x13\x06\x3f\x66\x16\x9e\xea\x7f\xcc\x84\xd9\xed\xbd\x67\x80\xc1\xc2\x89\x20\x20\x0c\x61\x67\xe4\xf2\xf0\x49\xe5\xfd\xed\xa4\x41\x44\xd9\xfc\xbd\xc0\xf8\xef\xf8\x70\x1e\x1f\x15\x05\xf6\x04\x80\xe6\x0b\xb4\xd5\xe6\x03\x04\x8e\xca\xd5\xf7\xbb\x6d\x5a\x23\x3a\x55\x9b\x58\x4d\xd1\x6e\x61\x61\x15\x87\xf8\x6a\xc3\x71\x79\x3f\x52\x07\x76\xcf\x72\x5c\xf6\x9f\x21\xaa\x1e\xfb\x7b\x15\x08\xd5\xa0\x3d\xbc\xe7\x62\x1f\x2b\xaf\x3e\xbf\x54\x96\x78\x0d\x2a\x85\x29\xb4\xc1\x05\xae\x32\x2e\x67\x5f\x4e\x56\x1d\x3e\xe8\x6a\xcd\xfd\x29\x77\xf8\x85\x88\xfb\x97\xb6\xc0\x81\xbc\x54\xa6\xde\x11\xf6\xdb\x43\xa6\x5b\x21\x53\xb9\x2f\x45\x41\xd4\x5d\xdc\x73\x38\xfa\xb1\x9d\xd6\xb7\x43\x7b\xdc\xad\xd0\x2d\xde\x28\x53\x9a\xd9\x6e\x1f\x4e\x15\xdc\xae\x94\x7a\x51\x7d\x56\x09\x90\xe1\x83\x0d\x52\x22\xf8\xfb\x93\xca\x36\xe4\x69\xd8\xbb\xa8\x63\xaf\xb0\xb1\x07\x43\x69\xb5\x57\x65\x7d\x96\xd1\xbe\xcc\x8b\x46\xd2\xc4\x7a\x41\x4a\x90\x2e\x3c\x29\x8e\x65\x53\x0c\xca\xc7\xdd\x5c\xd5\x57\x47\x49\x77\x9a\x50\x1c\x1a\x3e\x5e\x1f\xf9\x59\xd9\x2e\xeb\x5e\xaf\x18\xaa\x42\x50\x93\x67\x21\x99\xee\xad\xc4\x76\x6f\x29\xcc\x10\xa3\xbe\x2c\x52\x1c\xc3\xab\xa9\x66\x26\x5d\xb4\x30\xdf\xf4\xee\xbd\xfe\x5c\x3b\x41\x56\x37\xb9\x9c\x5a\xce\x3a\xf1\xed\x34\xc7\x5e\xa7\xbf\xae\x63\x9f\x9b\xc3\xfe\x79\x3f\x7f\x07\x99\x75\x99\x06\x66\x80\xe0\x44\x1a\xa2\xd1\x09\x15\x33\x4a\x7f\xe9\x01\x7a\x10\x21\xa0\x48\x00\x85\x5d\x11\x68\xfc\x0a\xd2\x19\x4f\x18\x8a\x13\x35\x08\xe0\x10\x5c\xb6\x33\x1d\xfc\xbb\xf4\xa1\x1f\x62\x50\xf1\x77\xa2\x45\x05\x6f\x86\x07\x52\x57\x6e\xf3\x7e\x1d\x6e\x35\x18\x9e\xee\x16\x8a\x96\x62\x9d\xb7\xd1\x8d\xef\xae\xc1\xba\x6d\x3a\x64\xa2\x6b\x35\x40\xc6\x07\x75\x3c\x95\xf4\x2c\x3d\x9c\x33\xef\xc3\xea\x65\x8b\x42\xee\x1f\xb2\x2b\xab\x36\x81\xad\x6c\x4d\xa7\x80\x66\x75\x2a\x74\xd0\xd0\x20\x93\xd7\x58\x7c\x5b\x89\x1b\x0c\x4d\xdd\x25\x89\xdd\xbc\x7c\x4f\x24\xfe\x0e\x15\xde\x71\x7d\xba\x48\xef\xc1\x51\x37\x6b\x61\x18\x12\x96\x14\x9d\xa1\x24\xda\x86\x67\x2d\x37\x36\x6e\x62\x27\x32\x62\xcf\xd5\xd9\x31\xa4\xdc\x28\xf6\x8f\x8d\xbb\xbe\x97\xb5\x7e\xd2\xd7\x16\x53\x21\x1c\xdd\xfc\x98\xad\x8e\xde\x22\xd2\x02\x2e\x4c\xd9\xa2\x6c\xa3\x15\xc9\x45\x76\xc9\x80\xaf\x1c\xce\xfd\x3b\xed\x63\xdd\xdd\x7a\x9b\x2a\x3d\xf3\x76\x90\xd1\x39\xdf\x2e\x55\xba\x36\xca\x01\xbc\x23\xa9\x33\x3e\x88\x60\x3c\xde\x48\xd8\x35\x0b\xc1\xd7\xe6\x67\x14\xd8\x3b\xb1\x0f\xc6\xc9\x1b\xa4\x67\x24\x77\x9c\xd7\xaf\x38\x6f\x2f\x9d\xfb\x5d\xea\x9d\xb2\x69\x6e\x45\xfc\x18\x8e\xb7\xf1\x38\xf9\xcc\xb4\x9c\xd0\x24\xad\x6e\xbe\x5d\xf1\x73\x12\x14\x11\x6f\x3d\x8f\x06\x75\xb5\x6b\x41\xb2\xfd\x4b\xf8\xa9\x09\xec\xa0\xff\x57\xc7\xdf\x01\x00\x00\xff\xff\x04\x29\x2f\xd9\x57\x04\x00\x00")

func test_certsCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_test_certsCaCrt,
		"test_certs/ca.crt",
	)
}

func test_certsCaCrt() (*asset, error) {
	bytes, err := test_certsCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/ca.crt", size: 1111, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _test_certsCaKey = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x95\xb7\x12\xa3\x60\x12\x84\x73\x9e\x62\x73\xea\x4a\x78\x13\x6c\x80\x37\x3f\x20\xbc\xcb\x70\xc2\x0a\x10\x56\xf0\xf4\xa7\xdb\xf8\x26\x9a\xaa\x49\xbe\xea\xe9\xea\xfe\xcf\xff\x86\x97\x14\xcd\xfa\xe3\x7a\xdc\x1f\xdb\xd5\x42\xce\x97\xfe\x00\x29\xf9\x77\x81\x4c\x4d\x93\x66\x4e\xe3\x39\x0e\x08\x9c\x23\x71\xf8\xd0\x8d\xaa\xd2\x66\x75\x13\x7e\xfc\x2d\x1f\x56\x1b\x27\x26\xbf\x77\x1d\x4f\x5b\x95\x87\x57\x0e\x1c\xa2\x7c\xae\xdf\x76\x00\x34\xf2\xfa\x08\xaa\x5c\xe0\x21\xa0\x87\x6f\x22\xcc\x2b\x6a\x23\x61\x67\x81\x75\xe0\x97\x76\x29\x24\x1e\xe7\xb9\xdf\x2e\xbd\xad\xfa\x6e\x27\xa7\xc8\xdf\x61\xa3\xf2\x04\xda\x30\x37\x13\x11\x06\xe1\x1a\xb9\xff\x82\x84\x15\x89\xcf\xf2\x4c\x66\xd7\x1e\x1a\x35\x0c\xf5\x68\x66\x48\xd4\x63\xe5\x64\xdb\x23\xb3\x6a\x46\xbc\x7e\x5a\xf9\xf1\xe2\xb7\x73\xa5\x36\x5f\x70\xd4\xbb\xab\x62\xca\x37\x9a\x42\x4c\x94\xe1\x09\xe1\x61\x29\x85\xcb\x60\xaf\xd7\x59\x1f\x68\x34\x3f\x49\x2f\xd9\x91\xae\xaa\x01\xe5\x2c\x86\x1b\x44\x32\x25\xe4\x81\x01\xc7\xc4\x25\xf1\x07\xf1\x08\xd3\x3c\x19\x59\xa0\xbc\x8b\xb1\x8d\x34\xbc\x84\x0e\x04\x70\x55\xda\xc2\x60\x20\xf1\xd7\xed\x45\x6b\xe6\x9a\x4f\xd7\x11\x82\xeb\x12\x83\x9e\x7a\x4a\xce\xbe\x2e\xa5\xd9\xb1\xd1\xae\xf0\xab\x9b\x28\xda\x38\x9c\x83\x48\xd5\x32\xbd\xaf\x54\x15\x43\x00\x2c\xf9\xb8\xd1\xe9\x3a\xe1\x73\x29\x6d\x1b\xe1\xc0\x53\x46\x01\x78\x23\xde\x48\x74\x95\xf8\x13\x4f\x9f\xf3\xa9\x89\x9c\xc3\xf1\xdc\xf4\x13\x5b\x62\x5e\x04\x47\x5d\xdc\x36\x2e\x3f\xbd\x52\x28\x9a\x1f\xdd\x14\x74\x7b\xfc\x80\xd5\x93\xa4\x46\x43\x74\xd1\xb2\x3b\x4d\x5d\x11\xb7\xba\x85\xb3\x2a\xa1\x93\xf0\xfe\xc0\x2a\x93\xc8\x9b\xf3\x31\x2a\x7f\x3e\x61\xc7\x2e\x7d\x22\x69\xc8\x8b\x99\xa1\xd3\xa5\x84\xf8\xf5\x36\x15\x59\x9b\x3b\x94\xe6\x86\x38\x75\x3a\xf6\xce\x5c\xf0\xf8\xae\x78\x09\x2a\x19\x91\x27\x44\x38\x16\x05\x13\x32\xb7\x63\x24\xd1\x68\x4b\xd9\xc5\xbc\x70\xf7\x53\x93\x7d\x41\x00\x5d\xf6\x46\xe6\x14\x3a\x0c\xe6\xc9\x9b\xa7\x40\xe2\xa3\xd5\xf7\x52\x4d\x37\xef\x11\xef\xb7\xa3\x56\x3b\x9f\xd4\xd8\x1e\xcb\x1f\xed\xd2\xf0\x62\xaa\x2b\xdc\xfd\x76\x77\x7e\x7d\x7a\x61\x0b\xa0\x70\xa2\x9f\xfd\x97\x79\xba\xda\x52\x05\x3a\x1a\x78\x34\xaa\xa6\x1f\x0d\x07\xc1\x77\x56\x6e\x98\xfa\xa0\xce\x75\x57\xe3\x89\x73\x1f\x9d\xdc\x04\xa3\xdb\x90\x47\xc7\x9c\xcf\x82\x5d\x3b\x49\xad\x12\x08\x7d\x2b\xae\x91\x61\xb6\x76\xc9\x93\x7a\xf9\x52\x74\x92\x8f\x3c\x27\x19\xf7\xdb\x6e\xdb\x57\xc3\x04\x65\x1f\xab\xfd\x67\x4c\xd5\x89\x33\xa7\x98\x72\x75\x2b\x1d\x8a\x83\xf5\xe5\x12\x4b\x84\xef\x21\x7b\x45\xd6\xc3\x95\x84\x3a\x91\x38\xd6\x6a\x07\x19\x09\x86\xc7\x3d\x8e\x36\x55\xb6\x20\x25\x7d\xbb\x9d\xf5\x9b\xe1\xef\x50\xff\x94\xdd\xb6\xcd\x42\x3c\xd7\xc4\x04\xf6\x1d\x8f\x26\xb8\xd2\x36\x48\xbb\xab\xda\xec\xb5\xae\xc8\x06\x66\x3b\x6e\xb8\x5b\xfd\xed\xdc\x2b\xeb\x02\x4a\xf5\x60\xc3\xb2\x78\xeb\x82\x81\x19\xb2\xf6\x35\xfc\xe6\xbe\x82\x23\x4d\xdf\x99\xa4\x50\x93\x87\xa5\xfd\xcd\xf2\xd0\x17\x04\x34\xae\x96\xe8\x8c\x02\x4f\x6d\x2a\xab\x54\xfa\xe8\xa5\x88\xbd\xd2\x23\xe7\xae\x36\x4c\x58\xbb\x86\xec\x34\xca\x42\x60\xb0\x9e\xc4\xab\x81\x88\xb8\x2c\x04\xff\x88\x29\x75\xac\x21\xf2\xe7\x73\x2c\x43\x9f\x91\x2a\xcb\x42\x17\xde\xf1\xf1\x11\xbc\x5a\x4e\xc4\x81\x8f\x10\xfd\xeb\x11\x72\x02\xbe\x13\x0d\x53\x23\x65\xfe\x9e\xca\xa0\x05\xa0\x69\xab\xd4\xd3\x17\xbd\xf0\x56\x65\x41\xf8\x02\xbe\x70\x69\xd6\xc9\x8a\xed\xc7\x91\xad\xc5\xc6\xa2\x13\x33\xf5\xd3\xfb\xbc\x63\xb9\x16\xb0\x19\x87\xf1\x16\xc1\x1c\xde\x5d\x07\x7f\x14\x1e\x21\x18\x07\x47\x5e\xf9\x51\xcc\x99\x94\x0b\x20\x74\x2a\xf1\x45\x8c\x39\x4c\x28\xea\x61\x38\x22\xd6\xa2\x57\xf1\x5a\x6a\xd0\x92\xf2\x2b\xe9\x60\x39\x2a\x67\x94\x5d\x7f\xc8\x1c\x11\x5a\x15\x76\x5a\x07\xad\x8c\xb2\x7d\x14\x77\x83\xbc\x65\x0d\x7a\xb5\x09\x69\x73\x2f\xf3\xf4\xf1\x6c\xe9\x1c\xd8\x7f\xc0\x51\x9c\x64\x0d\x3d\x6a\x36\x4c\xb1\x17\x66\x6e\x6b\x63\xe4\x3b\x91\x46\x03\xcd\x9b\x26\x5c\xc6\x2e\xcd\x70\xa4\xfc\x49\x7a\x50\x5f\x37\x84\x0c\xd6\x8d\xe3\xb0\xda\x8b\xac\x92\x3f\x9e\xe7\xb4\x54\x27\x65\x91\x5b\xb0\xa4\xe7\x24\x30\x79\xe9\x08\xcf\x7d\x0e\x79\x9e\x69\x84\x80\xbf\x87\x28\xe1\x26\x22\x19\xd3\x08\x09\x34\x9f\xe3\x5e\x90\xd9\x2a\xab\xfc\x1d\x0a\x63\x9c\x60\x8c\xa1\x49\x45\xb4\xb8\xc8\x01\x7c\xed\x08\xbc\x76\x2f\xf1\xb9\x93\x96\x0e\x07\x7b\xf2\x0a\x8b\x07\x96\x38\x80\xc0\xb1\x8a\xff\x8c\x92\x05\x13\x88\x80\xc9\x50\xf6\x49\x5f\x3b\x87\x6a\x17\x1e\x3a\x01\x2c\xf5\x97\x27\xca\xfa\x87\x68\x65\x4c\x33\xd8\x24\x2c\x12\x0b\x8d\xba\x91\xa8\x78\x05\x85\x17\x8b\x30\xbb\x8c\xc6\x9a\x06\x0c\xef\x83\xd5\x30\x2a\xbf\x20\xf3\x61\x37\xa2\xaf\xbf\x07\x51\x6d\xc4\x93\x78\xa2\xe2\xc9\xaa\x4a\x92\xb5\xa5\xef\xaf\xcd\xe7\x6b\x59\x08\x91\xdf\xf0\xdc\xaf\x9f\x2c\xc2\x5f\x1d\xae\x06\x14\x42\xcb\xbd\xea\xfc\x32\xe2\x28\x75\xa8\x9e\x94\x42\x3b\xff\x21\x0f\xaa\x3d\x8a\x41\x31\x90\xc6\x84\x53\x75\xa8\x96\xdd\x6b\xc1\xa7\x99\x3b\xdc\x87\x62\x44\xb8\xdc\x75\xce\x5b\x1a\x47\xd8\x89\x3b\x32\x42\xce\x4d\xb2\x75\x69\x80\xea\x18\xf5\xb4\x49\x36\x87\x9c\xd7\x37\x53\x3f\x34\x06\xdc\x25\x36\x6f\xd7\x04\xd2\xac\x66\xfd\x4b\x23\x35\x42\xf8\xb4\x36\x3e\x68\xa9\x51\x94\xcc\xb9\x0c\x2a\xc6\x37\x3d\x8c\x93\x44\x6c\xcc\x90\x28\x8b\x99\xbd\x4c\x14\xe0\x96\x6e\x7b\x7a\x38\xef\x5f\xbd\x3b\xcf\xd1\x52\xbf\x50\xfc\xab\x17\x03\x71\x69\xc0\x68\xf6\xef\x74\xb7\x25\xf7\xc9\x27\x47\x14\xc7\xfa\xef\x5f\xe8\x5f\xad\x48\x96\xf8\xff\xeb\xe6\xbf\x01\x00\x00\xff\xff\x02\xc7\x3b\x27\x8f\x06\x00\x00")

func test_certsCaKeyBytes() ([]byte, error) {
	return bindataRead(
		_test_certsCaKey,
		"test_certs/ca.key",
	)
}

func test_certsCaKey() (*asset, error) {
	bytes, err := test_certsCaKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/ca.key", size: 1679, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _test_certsNodeCrt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x94\xcb\xce\x82\x38\x1c\xc5\xf7\x3c\xc5\xec\xcd\x44\x41\x50\x59\xb6\xb4\x40\x85\xa2\xe5\xa2\xe0\x8e\x8b\x82\x28\x22\x82\x14\x78\xfa\xe1\xfb\x16\x93\xcc\xe5\xbf\x6a\x4e\x9b\xd3\xb4\xe7\x97\xf3\xe7\xcf\x40\x6c\x10\xe7\x0f\x0d\xbb\x3e\xd1\x89\x06\x7c\xfc\xab\x0a\x94\x10\xc4\x7c\x4d\x03\xf7\x2a\x07\x9c\x40\x90\x13\x17\xd0\x9e\xf6\xab\xd2\x56\x1c\xf7\x63\x7d\xad\xeb\x51\x69\xdc\x0b\x07\x1c\xb1\x68\x6f\xd5\x17\x52\xf4\xa9\x03\x18\xb6\x21\x03\x5c\xb0\x26\xec\x51\x08\x0c\x20\x06\x58\x2b\xe8\x9e\x49\x6a\x19\xaf\xf7\x7d\x74\x76\x6a\xea\x06\x1c\xf3\x08\x9d\x18\x43\x98\x0f\x28\x91\x9c\x4f\x5a\xa9\x45\x24\xe5\x39\x5b\x61\x6e\x16\xa9\x23\x50\x3f\xe2\x74\xa2\x9c\xfa\xe9\xe8\xa0\x40\x39\xcf\xe2\xbc\xfe\xa7\x56\x82\x92\xba\x84\x63\xf0\x6b\x66\x61\xfe\xfc\xdb\x4c\x98\xdd\x06\xe4\x03\x1b\xe6\xce\x09\x02\xea\x43\x43\xe9\x2f\x46\xc0\xf3\x1c\xdf\x29\x58\x19\x9a\xd7\x18\x1e\x49\xd6\x88\x61\x08\x58\x00\x80\x4c\x20\x9a\x9f\x33\xef\x5b\xa0\x26\x50\x00\x0c\x11\x35\xfd\x2e\xd6\x5d\x2b\xf7\x87\x2b\xe3\xd3\x4b\x66\x93\x73\x1b\xbf\xf9\xb2\xe9\x68\x65\xb5\xba\xe2\xaf\xb7\xc4\xd8\x56\xc5\x9e\x7d\x4f\xdd\xe3\x30\x1a\x56\x02\xf4\x38\xac\xfd\x65\x39\x0a\x51\x63\x1b\x87\x40\x84\xb4\x78\xa9\xa7\x0d\x1e\x77\x67\xbf\xf6\x1e\xc0\x55\xf4\x31\x58\xca\xd7\xf2\xc1\x86\xf2\x4b\xb6\x1e\x2e\xc5\x4b\xba\x3f\xe1\xfb\x81\x84\xcf\x2e\xf9\x62\xd1\x12\xf5\xb8\xcf\x04\x4d\x3a\x94\x8f\xe5\x2e\xa8\xc4\xcf\x73\xe2\xca\x79\x61\x14\x86\x82\xb4\xc4\x8d\xf3\xfb\x21\x72\x13\xfb\xbd\xfb\x4e\x8d\xb9\xb1\x9e\x67\xfe\x4a\x9d\xd1\x06\xe1\x4b\xf6\x79\xbb\xd6\x8c\xf5\xe2\xf9\x79\x0a\xf7\xcd\x78\xfb\x94\xae\xed\x51\xd4\x45\x61\x30\x82\x6d\xdb\xf2\xcc\x0a\xef\xe2\xf9\xdc\x22\x73\xb9\x7e\xc5\x64\xf0\xdf\x19\xda\x6a\xf1\x75\x2f\x3b\x57\xe4\xbc\x5c\xb2\x5a\x7b\xb7\xc8\xdb\x8e\x70\x2b\xa4\x0b\x70\x78\xec\x94\x2d\x78\x00\x29\x68\x56\x51\xfb\x74\x6f\x05\x5a\x2c\x4e\xc3\x9e\x7c\xd5\xc7\xfb\x58\x65\x8b\xa1\x54\xd1\xa5\x0d\xc7\x6f\x60\x72\x75\xcd\x54\x33\xc1\x34\x84\x4b\x65\x77\x69\x0b\x41\xb5\xa7\xe3\xd5\x89\x13\x43\xa5\x5d\x5d\x94\x1b\x2c\xab\xf6\xd5\x3d\x85\x20\x9f\xe9\x00\x46\x19\x23\x58\x51\x20\xff\x70\x92\x21\x8e\xe1\x92\x33\x3c\x03\xa7\xd7\x08\x64\x3f\xc9\x09\xa6\x17\x60\xbd\x04\x01\xcc\xf3\x0f\xcc\xb1\x0e\x59\x8a\x00\x8b\x88\xc5\x23\x08\x59\x60\xce\x87\xb9\xc3\xe6\xfc\xdd\x95\x0b\x35\x99\xdb\x84\xec\xe7\xdb\xca\xe8\x3c\xd4\xc9\xda\x59\x09\x79\x9e\x36\x76\x35\xf4\x91\xa4\xb7\x05\x77\x97\x00\x00\x58\x0c\xe0\xff\x06\xfe\x9b\x0b\x8d\x07\x40\xf8\x01\x03\x30\xa8\x2f\x8d\x67\x9c\xac\x6e\x96\x4e\xb5\x09\x2c\xc2\x93\xd5\xb6\xf3\xf7\xc6\x77\x59\xd2\x96\x22\x47\xf9\x67\x5b\x36\x81\x2c\x35\x9d\xd4\x37\xb7\xb6\x4b\x43\xe8\xa5\x41\xbe\x7b\x0b\xa6\xb1\x59\x4e\xe7\xde\x90\x92\x9d\x28\x5d\x71\xd3\x9d\x09\x19\xcd\x57\x2f\x4e\x41\x7d\x8c\x08\xbe\xbf\xa5\xd6\xa1\x8e\x52\xb8\xe2\x81\x94\x4a\xd4\x90\xee\x51\x27\xe1\xa1\x6a\x51\x1c\x5d\xa8\x23\x04\xa5\x85\x5a\x71\x1a\xbc\xfd\x18\xe5\x7e\xe4\xc3\x41\xd6\x17\x9b\x43\x6c\x9b\x8d\x93\xd9\x5b\xfa\x54\xcd\xf6\x32\xe7\x13\xd5\x33\x4e\x55\x2a\xa6\xb2\x93\x1c\xe1\x47\x1a\x9a\x24\xfb\x3a\x34\x10\x2e\xfd\x59\xdf\x3c\x61\x76\x72\x1d\xcb\x9d\xa6\x9d\xe4\x6e\xe3\x96\x04\x96\x1c\x54\xd4\xde\x98\xad\xf1\x1a\x75\xac\x1f\x5f\xe6\xeb\x52\x1a\xe1\xab\xc9\xd4\x4d\x35\x7e\x24\x59\x54\x60\x1d\x87\x32\x14\xb2\xb5\xfc\x5d\xfa\xc7\xcb\xd9\xdb\x53\xf5\xe1\xc9\xee\xca\xaa\x69\xe1\x65\x85\xff\x30\xea\xf1\xd3\x4d\x61\x75\x40\xf0\xfd\x09\x3f\xee\xa4\xca\x91\x5c\x99\x71\x19\xef\x82\xa1\x28\xc5\x4e\x6d\xc1\x4e\x80\xdd\x1b\xb2\x87\xc5\xee\xc5\x1d\x76\x0f\x5b\xb1\xb2\xf1\xd5\xd8\xf2\xb3\x4d\xaf\x83\xf0\xdb\x39\xd8\x41\xff\xed\xa1\xbf\x02\x00\x00\xff\xff\x3b\x9c\x55\xb5\xa4\x04\x00\x00")

func test_certsNodeCrtBytes() ([]byte, error) {
	return bindataRead(
		_test_certsNodeCrt,
		"test_certs/node.crt",
	)
}

func test_certsNodeCrt() (*asset, error) {
	bytes, err := test_certsNodeCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/node.crt", size: 1188, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _test_certsNodeKey = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x95\xb7\x12\xab\x5a\x12\x45\x73\xbe\xe2\xe6\xd4\x14\x08\x4f\xf0\x82\x83\xf7\x56\x02\x44\x26\xbc\x07\xe1\xe1\xeb\x47\x73\x27\x7d\x9d\x76\x55\xd7\xea\x1d\xec\xf5\x9f\xff\x0d\x27\xca\xaa\xf5\xc7\xf3\xc1\x1f\xc7\x53\x03\xf0\x14\xff\xe8\xe2\xfb\xef\x06\x32\x55\x55\x9c\x80\xca\x01\xa0\xf3\xc0\x15\xc1\xe5\x44\xc6\xbe\xd2\x89\x6d\xdc\x43\x6b\x9a\x24\x2c\x9a\x77\xc4\xcc\xa3\x43\xcd\x4f\xad\x9e\xb9\xfc\xc5\xc2\x17\xb7\x91\xa3\xff\x32\xba\x24\x16\xa0\xa5\xaa\xfb\x83\x0b\x3b\x4a\x44\x08\xa6\xd7\xeb\xb3\xe9\x2c\xf7\xa9\xc6\x48\x90\x57\xe6\x2e\xb5\xd4\xef\xbc\x98\x7b\x69\xe7\xc0\xca\x48\x8a\xe6\x9b\xae\x6d\xb4\x52\xd9\x30\xe2\x03\x4f\x6d\x6a\x48\x22\x93\x90\xae\x2c\x7f\xf5\xc2\x19\x77\xd7\x66\x24\x1d\x44\xd2\xd6\x0f\x99\x32\x76\xb0\x57\xa3\xb7\xb9\x47\x8f\x86\xa3\xda\xf4\x62\x78\x51\x85\xb1\x50\x15\x5c\x4f\xc1\xa2\xe1\x42\x5a\x1f\x12\xf4\x63\x64\x0c\xeb\xa8\x56\x64\xfa\x90\xef\x6d\x19\x28\x02\xf5\xd1\x06\xd0\xa1\xf4\x30\x4b\x9b\x36\x4c\xc5\xef\x88\x35\xe8\x66\x70\x22\x2c\x89\xd5\xe6\x8b\x8a\x5c\xf8\xe8\x87\x3a\x17\xa2\xf2\x86\x62\xd4\xb7\x2c\x74\xc0\xc4\x8d\x29\x73\xdc\x29\x85\xc9\xb1\xf3\x43\x03\x56\xa7\xaf\xb2\xa1\xbd\x22\xc2\x45\xf6\x2e\xf5\x7d\x63\x8f\xf5\x27\x39\x14\xcb\x1b\x71\xb1\x44\x62\xe6\x8e\x63\x9c\x0c\x85\x1c\x0f\x3b\x05\xe9\x28\xe0\x42\x4e\xd4\xc2\x67\x6e\xbc\x09\xfb\x73\x7f\x1a\x1f\xf5\x0d\x57\xb6\xe3\xe3\x6d\x10\x1c\xaa\x00\x5c\xc0\x81\xf1\x17\xb6\x8c\x3a\x8b\x40\xce\x52\x06\x26\xc4\x7d\x33\x50\xf4\xfa\x04\x5b\xd6\x14\xec\x22\x6e\xa7\x47\x6f\x0d\x9a\x3d\x1e\x5c\x37\x7c\xc7\x0d\xe0\x9d\xdd\x2f\x25\xcf\x37\xbd\xff\xed\xf7\xaf\xc8\x49\xa5\xa3\xa4\x21\x6a\x44\x20\x4a\x68\xa9\x13\x45\xa4\x85\x22\x96\xb0\xb8\x94\xdc\x11\x6a\xe6\x8c\xed\xca\x61\xa5\xfb\x28\x0e\x87\x03\x4a\x23\x9b\xaa\x86\x67\x1b\xcd\x3f\x1a\x1f\x2a\x65\x8f\xad\xfc\x30\x04\xbf\xec\x84\x0c\x5c\x3a\x9b\xfb\xaf\x21\xb9\xa0\xf1\xba\x37\x4e\x64\x5c\x93\x1c\xf1\x70\xf5\xb2\xa4\xa8\xbe\x4a\x8a\x3c\x1a\x46\x6e\xad\x79\xae\xca\x82\xbf\xa2\x4d\xb5\x94\x8c\xc9\x02\x22\xa0\xe6\xdd\x64\xd0\x7d\x74\xf1\x03\x16\x83\xd3\x11\xa1\xb6\x26\xf5\xc0\x99\x69\x7a\x22\x28\x89\x07\x38\x2a\x99\x4f\xa5\xb4\xc1\xc7\x31\x6f\x91\x41\x51\x29\x45\xe9\xe5\x75\x6d\x87\xd1\x27\x7e\xdb\xc3\xaf\xd9\xfe\x26\x73\x8d\xef\xa9\xb7\x17\x4e\xc4\x40\xe9\x4b\xa8\x12\x01\x26\xde\x91\x96\x4b\xd9\x9b\xc9\x79\xdd\x5b\xda\x8f\xd3\x91\xa7\xf4\xb8\x6e\x9d\x67\x91\x80\xa7\x2d\x40\x98\xf8\x98\xb1\x9d\xe3\x60\xfe\xa1\x7f\x47\x5f\x76\x17\xa3\x3b\x8d\x2f\xb4\xa1\x45\x83\x32\x22\x5f\xbe\x45\x80\xbb\xcd\x41\x2d\x71\x40\xdf\x31\x55\xe5\x5c\x3d\x09\xf2\x83\xc8\x9b\x94\xe2\xae\x5c\x18\x83\x41\xd1\x6a\x23\x90\xcf\xc5\x65\x38\xf5\x1d\x53\xca\x41\x2e\x06\xa4\x74\x24\x91\x6a\x3b\xaa\x74\x6e\x26\xaf\x18\x7a\x09\x02\x4e\x51\x3b\x8f\x3c\xeb\x02\x85\x49\xf4\x76\x2e\x66\x71\x3e\x9d\x42\xd3\x3b\x43\xd4\xa6\x7a\x62\x79\xf5\x28\xc7\xde\xa9\x1e\x72\xaf\x0e\xd0\xc3\x5e\xb9\x31\xac\x76\x2f\x8f\x34\xa4\x7b\x37\x4f\xa7\x12\xa3\xea\x69\x56\x96\xa3\xc5\x44\x5d\x0b\x94\xca\xf7\xee\xb9\xa2\x70\xfc\x0a\xbc\x5e\x89\xf1\x9e\x61\xfb\xff\x13\x53\x06\x32\x40\xc1\x6d\xbb\x43\xec\xb7\x58\x4c\xf2\xac\x15\x9a\x06\x76\x11\x22\x3a\x0f\x55\xb9\xca\xb3\x34\xbc\x63\xa2\xdb\x05\x6b\xd1\x73\x72\xd7\x51\xf3\xec\xdb\x84\xcf\x57\xf1\x46\x96\x95\xec\x17\x53\xd0\xa1\x97\xbc\x29\x13\xd7\x60\x72\xe1\x18\x8c\xbf\x5c\xe9\x92\x72\xbe\x6e\x76\xf2\x04\x0a\x1f\xfd\x6a\xbd\xcb\x56\xc2\xa9\x47\xca\x77\xbe\xe8\x27\x99\x2d\x86\xf0\x55\xdb\xe7\xd6\xb7\x91\x89\x2f\xb8\x05\x49\x83\xd1\xe7\x32\xae\x84\x30\x38\x1b\x0c\xb6\xb0\x74\xef\x4b\x7a\x1b\x89\x55\x2a\x5e\x24\xe9\x62\x12\xcc\xac\x73\xfa\x43\xe6\xdc\x3d\xcf\x9a\x9e\x2e\xca\xa2\x55\x93\x26\x44\x68\x71\xc6\x6a\x48\x51\xd4\xc7\xc9\x92\x2d\x49\x90\x21\xc2\x6a\xd2\xa2\x87\xc6\xd5\x60\x7d\x8d\x7e\xc4\xeb\x33\x5e\x72\x5a\x65\x76\x37\xe7\x75\x60\x8d\xa9\x73\x99\xac\x12\x27\x88\x4a\x4e\x70\xd2\xa9\x73\x4c\x3d\x20\x71\xc1\xf5\xf3\x20\xeb\xa1\x6b\x01\xe6\x9f\xf8\x03\x7b\x4b\xe5\xf2\x3d\xd7\x41\x38\xaa\x4e\xb7\x5b\x43\x7e\x5d\x5a\xc0\x1a\x47\xbe\x55\x26\x4f\x7c\xfc\xea\xf0\x3e\x02\x90\xf4\x87\x76\x19\x9b\x0e\x95\x1d\x42\xb4\xbf\x07\xb4\x46\x02\x96\x9d\x76\x65\x48\x4f\xa5\xab\x73\xa5\x2b\x78\xaa\x8b\x62\xeb\x55\xcd\xf7\xaa\xa8\x0d\x21\xd9\xbc\x38\xcf\x7d\x46\x3e\x4f\x6c\x67\x12\xb4\x7b\x5a\x18\xeb\x42\x5f\x2d\x0e\x5a\xd3\x60\xea\x5c\x7a\x65\xb7\x47\x49\x24\x55\x4b\x4b\x70\xd2\x2a\x6c\x4e\x29\xd6\x98\xd6\x72\x1e\x9e\x73\x80\xe4\xb9\xef\xc4\x27\x3c\xb7\x97\x1e\x3f\x6f\xa1\x78\x14\x08\x6f\x9c\x21\x04\x3c\xd9\xde\x71\xf6\xd1\x5b\xf5\x84\x6c\x58\x0b\x70\x8d\x79\x08\xcc\xc0\x5c\x1b\x72\x77\xac\xdc\x0f\xcb\xa0\xb4\x97\x4b\x1d\x46\xc6\x19\xad\xee\xa1\xf2\xa7\xe4\xc2\x6a\xfa\x35\x4a\xfb\xba\x65\x08\x69\x69\xd3\xfb\x8b\xcc\x03\xb2\xc9\xba\xd4\x65\xe7\x21\xb1\x4a\x38\x35\x42\xfe\xd3\x24\xab\xd5\xc7\x79\x00\x26\xfc\x4c\xef\x68\xdd\xec\xde\xd6\x4d\x4c\xc3\xbd\x6a\x97\x9a\x28\x8a\x24\xe8\x1d\x83\x2f\xb9\x3f\xce\x0f\x0d\x34\x16\x1b\xd3\xe0\xfd\x42\x2c\x19\x99\x3a\x95\x1c\xb3\xb1\x06\x0c\xfc\xfd\xe2\x8b\x1c\x82\xc1\x46\xe3\x83\xd0\x85\x5b\x0f\xe2\xd2\x33\x4d\x67\xd8\xd7\xc9\xb8\xa0\x04\xf5\xee\xe8\x66\x05\x64\x4b\xe1\xd0\x7d\x7e\x72\x16\x9f\x87\x4d\xf0\xc5\xa9\x06\xd4\xdd\x0a\xd7\xf3\x7e\x36\x03\xe7\x62\x26\x96\xb0\xb5\xa8\xef\x19\x6d\x0b\xe5\x3f\xff\x40\x7f\xb5\x22\x5a\xc2\xbf\xeb\xe6\xbf\x01\x00\x00\xff\xff\x2b\x7e\x89\x71\x8f\x06\x00\x00")

func test_certsNodeKeyBytes() ([]byte, error) {
	return bindataRead(
		_test_certsNodeKey,
		"test_certs/node.key",
	)
}

func test_certsNodeKey() (*asset, error) {
	bytes, err := test_certsNodeKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/node.key", size: 1679, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _test_certsRootCrt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x94\x4b\xcf\xba\x38\x1b\xc6\xf7\x7c\x8a\x77\x4f\xde\x70\x10\x7d\x64\xd9\x96\x02\x05\x0a\x56\x4e\xe2\x0e\x39\x2a\x20\x22\x28\xc8\xa7\x1f\x9f\xff\x2c\x26\x93\xe9\xaa\xb9\x9a\x5c\xcd\x9d\xdf\x2f\xf7\xff\x7f\x0f\xc4\x06\x71\xff\x87\xf0\x31\x20\x3a\x41\x20\xc0\x7f\x52\x8e\x12\x82\x84\x15\x21\x50\x14\x15\x98\x09\x04\x15\x61\x58\x9f\xd7\x51\xc1\xfe\xcf\xc0\xc7\x93\x7f\xea\x02\xfc\x48\x9b\x1b\x70\x61\xd5\x0c\x75\x73\x35\xd4\x59\x84\x80\x8d\x3a\xd0\xc0\x93\xa3\x47\x32\x63\x90\x68\x11\x63\x36\x9e\x5b\xed\x22\xbb\xcf\xac\x53\xeb\x44\xae\x16\x3d\x00\x01\xac\xdc\x08\x02\x1a\x68\xd8\x7d\x27\xf2\xf4\xb9\xc8\xfa\x2d\x45\x50\x63\x01\x28\xf4\x59\x5c\x38\xf7\x06\x56\xba\x82\xc5\x5d\x89\xe8\x06\x6d\xfa\x1b\xba\xeb\xbf\x33\x8a\xe8\x82\x6f\x80\xfd\x5d\xd6\x07\x28\xfc\xa7\x8c\x4b\xbf\xd5\x14\x8c\x06\x90\x42\x0c\x16\x8a\xbf\xbf\xbf\x73\xed\x3b\x92\x4f\x66\x8d\x25\x96\xdd\x9f\x49\xfd\xce\x5c\xc0\x30\x84\x0c\x68\x55\x85\x0f\xe0\xf7\x9d\xf5\xe8\x7b\x87\x1c\xa0\x6a\x9b\xcc\x43\x8b\x4b\xbd\x9f\x12\x23\xed\x4f\x9b\x6e\x3b\x53\xfc\x8e\x99\x1d\xc9\xf5\x47\xdd\x26\x9e\x0e\x98\xe7\xe3\x1f\xf9\x9d\xab\xb0\x54\x05\x89\xbf\xef\xaa\x81\xf5\xde\xc7\xb8\x8e\xdc\x93\x48\xa7\x6e\x9f\xc9\xb8\xa1\x28\xc8\x1d\x8d\xe7\xfd\x1a\x03\x6b\xe7\x89\x67\xb4\x53\x4c\x11\x96\xe8\x10\x2b\xcd\xd9\x0f\xba\x4d\x15\xda\xa5\x3a\x08\x8a\x96\x5f\xd7\xc3\x68\x2b\x05\x95\x5a\x6e\x9e\xde\x78\x34\x2d\xb5\xa9\x0c\x21\x6e\x5d\xab\x66\xfa\x83\xa4\xc1\x7b\x01\x8a\x63\x5c\x55\x8d\x4f\x3f\x06\xf0\x5c\x29\x40\x0d\xb2\xa4\x4c\x14\x2e\x9d\x55\x10\xc3\xdb\x25\x02\x7f\x03\xb1\xc6\xd1\xcb\x31\x1e\x5f\x50\x7a\xdb\xec\x35\x58\x27\xe9\xa4\x9c\x79\x43\xcf\x8f\xa7\xcf\xf3\xa8\x6c\x10\xdf\xce\x27\x27\xba\xc5\xd6\x39\x32\x3c\xf4\x64\x77\xde\x52\x2c\x64\x13\x94\xf3\xc1\xa7\x29\xf9\x0d\x57\x8e\x0c\x97\x9b\xad\xa9\xba\xad\xae\x74\x44\x68\x5b\xe8\xda\x5e\x12\x7a\x68\x43\x84\xa6\xde\x16\x97\x21\x39\x10\x85\x5a\xfc\xe8\xd7\x82\xaa\x2c\xea\x85\x25\x53\x59\x57\xfa\xc8\xc6\x25\xc8\x39\x17\x91\x50\x7a\x9c\xd7\x60\x4c\x5c\x82\x8b\xe5\x1c\x2e\x63\xfc\x19\x11\xf8\xda\x01\x52\x7a\xa7\x28\x9c\xb5\xea\xeb\xc9\x51\x3c\x00\x66\x0a\x5f\x83\x34\x50\xc5\x15\x85\xf4\x97\x5c\xce\x59\x8c\x51\x0a\x7a\x03\xa1\x2f\x4a\x16\xea\x70\xfe\x52\x07\xa2\x81\xfc\xc1\xf0\xc9\x65\xa3\x7d\xf1\xa1\x39\x04\x40\xf9\x5a\xca\x20\xaf\x44\xc8\x71\x1e\x27\xf2\xba\xf8\x75\x2c\x7c\x7a\xce\xbd\x76\x95\x6c\x85\xa7\xc7\x0f\xff\x3e\x84\x2b\x6f\x66\xcb\xaa\x1f\xae\xef\x8f\x0d\x37\xa1\xee\xdb\x05\x8d\x59\xb9\x6b\xe4\xad\xaf\xe7\x23\xac\x9b\xed\xd5\xca\x49\xd6\x83\x3a\xaa\x0d\x9b\xbf\x10\xce\x70\x07\xf3\xa7\xd5\x16\xba\x74\xa7\x67\xc1\xa3\xe1\x62\x5e\xaa\xf8\xa0\xde\x81\x78\x5e\xaf\x4d\x71\x72\xa0\xee\x2d\x92\xe8\xac\x81\x4d\xd5\x7c\x72\x71\xdf\x88\x93\xd9\xaa\x99\x93\x3e\xa4\xee\xc8\x01\x36\x53\x7e\x4c\xbb\xe3\x9c\x65\x4b\x01\x61\x96\x19\x18\x9d\x81\x90\xb2\xf5\xb9\xed\xdd\xeb\x8a\xc6\xb3\x72\xc7\xa6\x87\x73\x07\x4d\x3b\x2a\x4e\x24\x4b\x4a\xb0\x49\xc5\x86\x4c\x35\xdf\x72\xb7\xa9\x34\x0e\x2f\xeb\xd9\x17\xcf\xca\x89\x3e\xfb\x5d\x15\x6d\xd9\x2b\xad\xf4\xdd\x27\xdb\xcf\x0f\xdd\xc9\xe7\x00\xb5\x13\x3c\x98\x51\xaf\xd2\xc8\x7c\xb1\x5e\x56\x85\x54\x5f\xbd\x32\x51\x8d\x26\xe4\xa2\x97\x51\xc3\x98\x39\x20\x84\x9b\xb9\x15\x8f\xea\x4b\xa6\x7e\x6f\x91\xfd\x38\x39\xdd\x8f\xb6\x7f\x3e\x70\x67\x66\xf7\xa1\xbc\xef\xba\x61\x42\x40\x96\x7c\xa4\x3f\x15\xc3\x97\xd5\xc6\xbb\xd7\x13\xe7\xd2\x31\xe2\xfe\xac\x06\xec\x6a\xff\x5d\x17\x7f\x05\x00\x00\xff\xff\x56\x00\x60\xb5\x4b\x04\x00\x00")

func test_certsRootCrtBytes() ([]byte, error) {
	return bindataRead(
		_test_certsRootCrt,
		"test_certs/root.crt",
	)
}

func test_certsRootCrt() (*asset, error) {
	bytes, err := test_certsRootCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/root.crt", size: 1099, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _test_certsRootKey = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x95\xb7\x12\xa3\x50\x16\x44\x73\xbe\x62\x72\x6a\x0b\x8f\x20\x98\xe0\x81\xf0\x08\xef\x33\x40\xf0\x70\x02\x04\xc2\xe9\xeb\x57\x3b\xf1\xde\xb4\x93\xae\x53\xf7\x54\xff\xe7\x7f\x27\x48\x8a\x66\xfd\xf1\x7c\xf0\xc7\xf1\xb4\x08\x04\xd2\x1f\x43\x4a\xff\x25\xc8\x43\xd3\xa4\x19\x68\x02\x00\x86\x08\x5c\x09\x7c\xc9\xa8\x13\xdf\xa1\xc7\xc5\x2d\x01\xb3\x77\x53\x57\xc5\x08\x0e\x9f\xcf\xc0\x9c\xe4\xaa\x49\x0d\x90\x0e\x05\xc0\x68\xc1\x9e\xf3\x14\x2e\x63\x08\x85\x25\x6c\xfd\x16\x67\x11\xde\xb4\xdc\xb8\xd6\x2e\xaa\x8a\xf3\x9b\xfa\xee\xa1\x5b\xf8\xea\xdc\x18\x43\x72\xc1\x38\xdd\xbc\xde\x5c\x60\xed\xca\x9c\xc6\x17\xad\x37\xe8\x76\x51\x09\xee\x8c\x91\xc8\x82\x41\x8b\x34\x1f\xe8\xb1\x34\xf4\x37\x4e\x44\x92\xf3\x8f\x72\x24\x7d\x50\xf0\x79\x88\xbf\x64\x10\xf7\xcd\x6c\x63\xd2\x1d\xae\xb9\x89\x3b\xcc\xa2\xa5\x80\xa6\xa2\x87\xe1\x6a\x63\xf4\x0d\x78\x64\x4b\x07\x1a\xa6\xb7\xb9\xc3\xd8\x87\x90\x3e\xce\x8f\x9c\x5f\xb4\x1a\x73\xb3\xc8\x4e\x43\x1d\xd5\xcd\x48\xa7\x11\x21\xd7\xc6\x47\xed\x4a\x93\x4d\x84\xf2\x13\x5b\xe9\x30\x84\x29\x6d\x7c\xc4\x9a\x46\x46\xd8\x6b\x13\xd4\x29\xc6\x31\x3c\xec\xf6\x44\x4f\xe0\x61\x75\x5f\xe3\x64\x98\xb4\x69\x87\xc6\xa1\x84\x4f\x4c\xe3\xd2\x66\xd9\xa1\xbe\x3a\x30\xdb\x0c\xb9\x0e\x1e\x23\x7b\x1a\x2a\x46\x75\x2a\x42\x7c\x84\x96\x40\x15\x10\x9f\xe2\x57\xb6\x70\x5c\x6b\x82\x78\x18\x2d\xfb\x84\x38\xf4\x6e\xf2\x10\x28\x67\x61\x1c\xda\x1d\xb8\x40\x00\xd3\x0f\xb6\x2b\x2e\xc3\xda\xc2\x05\xa3\xb6\x9c\x95\x0f\xc4\xc1\x09\x3d\x27\x0a\x43\x9c\xf6\x3a\xb8\x4a\xdb\x2b\x05\xdb\x00\xdb\x92\x11\xe4\xce\x7c\xfb\xbe\xa7\x58\x05\x23\x99\x17\xac\xa6\x2c\x6b\xc9\x4f\x62\x61\x76\xe5\x5b\x4b\xae\x3e\xc6\x2a\x7f\xcb\xc8\xa2\x5f\x43\xd3\x78\x0a\xa9\x66\x95\x1e\x39\xae\xbf\x99\x94\xb1\xfa\x2d\x4d\x17\x0e\x8f\x4a\xdc\xfd\xde\x61\x21\x24\xaf\xf5\x35\x4b\x83\xfa\xdc\x44\x73\x20\xac\x49\xe0\x49\xdf\xd0\x2f\x26\x6e\x90\x7d\x3f\x0c\xcb\xe4\x6a\x2f\x68\x44\xb5\x93\x07\x22\x7f\xbd\xca\x1c\x54\xbd\x5e\xa5\xb5\xc1\x8d\xad\xbb\x16\x44\xae\x5c\x7e\x4b\xb2\x28\x87\xb7\x1c\x3d\xd7\xe5\x9a\xaa\xb8\x2e\x7d\x62\x73\x95\x91\x59\xd9\x4c\x28\x57\xe8\xef\x19\x08\xe1\x15\xdd\xa7\x7b\xee\xf9\xa5\x12\x2f\x22\x97\x8f\xeb\x0e\x12\xb6\x7c\x97\x9a\xb8\x97\x36\x70\x77\x25\xd1\x80\x4d\x65\x36\x8a\x47\x1d\x8f\x62\x62\x84\xb3\x88\x7d\x78\x9c\x29\x38\xd3\x87\x1e\x73\xf7\x9a\x86\x88\xf5\x1f\x78\xb4\xa7\x7d\x8b\xe1\x2a\x93\x6e\x5d\xeb\x04\xf6\x32\x29\x1f\xb5\xca\x0c\xf9\x24\x24\x89\x1d\xf9\xf8\xdd\xbe\xca\x50\xba\xe9\xb8\x83\xe0\x4f\xac\xec\x8f\xcc\x03\x93\x22\x00\xcb\xcf\x21\x4d\xbf\x12\x02\xe4\xf5\x5d\x76\xed\xa6\xed\xef\xca\x5b\x5b\x65\xae\x79\x4a\x6b\xbf\x8d\x9f\x28\xb8\xb6\xe2\x7e\x5d\x78\xc5\x2a\x99\x6b\x70\x25\x22\x3f\x75\x63\xce\x14\x71\xb8\xcd\xca\xf9\xfd\x28\x32\xe3\xe2\x8f\xbb\xdf\x8c\x21\x19\x7e\x00\x01\x8b\x66\xd6\x08\xe1\x4e\x2c\xd5\xb1\x0d\xde\x09\xbe\x70\x9a\x60\x3c\xed\xda\x0a\xf9\xa1\xbf\x45\x48\x24\x7f\x35\xbe\x54\x82\x0c\x8d\x3c\x2f\x5b\x3c\x9a\x67\x4c\x1d\xc7\x1e\x5f\x59\x0c\xf4\x88\x96\x8c\x09\x8a\x97\xf7\xad\xaf\x32\x8b\x37\xd8\x11\x7d\xb8\xf3\xa1\x1b\xd7\xff\x1a\x3b\x2f\x16\x39\xf2\x28\x8e\xec\xfb\xf6\x7c\x5d\xf4\x24\x83\xa1\xf9\xb6\xa6\x4d\x9d\x6d\xd9\x3e\xd4\xb1\x01\x66\xa1\xa0\x2c\x41\x87\xd4\x5d\x1e\x86\x5c\x9d\x7c\x54\x68\xde\xf7\x78\xd7\x6e\x49\x95\xcf\x2c\xe4\x90\x53\x2a\x4e\x6f\xb4\x51\x1f\x56\x6a\x10\x1d\xca\x6e\x06\xbc\xb4\xc7\x47\x44\x2a\xcd\x40\xe3\x43\xd6\xec\x6f\x89\x72\x04\xdf\xd3\x27\xea\x63\x30\xb3\x57\xaa\x44\x91\xbb\x42\xc7\x8a\x5b\x7a\x52\x88\xa5\xdc\x9d\x87\x57\x1a\x3e\xe6\x40\x7a\x7d\xee\x58\xb4\xda\x5e\x10\x9a\xde\xbb\xaf\x5d\x23\x73\x94\xf8\x1a\x08\xae\x20\x7e\x95\x01\x88\x84\x44\x2b\x3b\x70\x03\x9d\x45\xe5\xc7\xcb\xe1\x8c\x1b\x72\xda\x9d\x1c\xf5\xd2\xfc\xe6\x25\xc2\x2f\xb1\x50\x7f\xed\x11\x7d\xed\x71\xcc\x09\xe6\x7a\x0c\x61\x16\xc8\x06\xf3\xf6\x1e\x7c\x71\x71\x8e\xea\xeb\xc5\xea\xaa\xdf\xfb\x87\x2a\x5f\x9e\x4e\x69\xfc\x03\xc1\x36\xe3\xc7\xa0\xc1\x0e\xb6\x68\xc5\xc3\xfe\xc9\xc9\x3a\x67\x8b\x93\x99\x25\xf4\xe3\x2b\xcd\x14\x99\x3c\xbb\xf3\xb5\x2b\x39\xbb\x33\x0a\xad\x8f\x54\x68\x95\xa2\x63\x93\xe4\xf5\x4c\x52\xa1\x46\xe4\x6d\xfa\x49\xff\x43\xeb\x16\xbe\x99\x50\x18\xb0\x68\x92\xde\x4b\x11\xfe\xc2\x65\xf6\xb0\x78\x35\xec\x19\x70\xfb\x6e\x45\xd8\xc8\xc9\x4f\xb8\xae\xcc\xed\x4a\x69\xa9\x08\x53\xc1\x68\x18\xa4\x78\x97\x90\x8a\xfd\x84\x46\x3b\xef\x6b\xdf\xac\x0d\xf5\xa5\xe6\xe7\x43\xc3\x07\x07\xba\x3e\x1b\xe7\xf4\x08\x5f\x8e\x26\xd6\x6d\x42\x52\xac\x99\x58\x8d\x67\xdb\x89\x9a\x9b\x45\xb1\x0f\x15\x96\x08\x56\xf9\xbe\x4c\x30\x3c\x1f\x9c\xf9\x60\x19\xbe\xf9\x6a\x2c\x52\x0b\x16\x6e\x64\x3c\x3b\x7e\xf8\xa6\x2e\xac\x55\xc2\x73\x29\x8d\x01\xaf\xd7\xe3\x64\xb7\xb2\x20\xcd\x29\xbf\x84\x43\xa9\xe0\x09\x12\x17\x1b\x40\x5d\x43\x80\xae\xe8\x2b\xe7\xd2\x25\xf9\x49\xec\x4c\xbe\x72\x4e\xc5\x7e\xa8\xa8\x21\xde\xa9\x36\xfb\x28\x2c\xf3\x6c\x7d\x04\x7c\x37\x5e\x3a\xfb\x84\x37\x77\x20\xa9\x33\xbc\x06\x13\xe9\xb8\x9b\xc4\xad\x05\xd7\x3b\x77\x59\xa8\x39\xe5\x69\x2d\x85\x3f\xb0\xfb\x84\xb9\x62\x7e\xbc\xd7\x48\x87\x9a\x53\xd6\x34\xd9\x71\x3b\x0a\xd9\x67\x19\xdb\xad\xe3\xae\xac\x90\x98\x2a\xc6\x55\x6f\x64\x9d\xbc\x22\xff\x62\xed\x17\xdd\x7a\x9d\x37\xac\x5b\x04\xbc\x30\x66\x82\x89\xe5\x95\x67\xbf\x5c\x4b\x06\x39\xfc\xf4\x3f\x1b\xd3\x54\x71\xca\x32\x47\xbd\x1f\x28\xf8\xfb\x17\xf9\x37\x2b\x92\x75\xff\xff\x73\xf3\xdf\x00\x00\x00\xff\xff\x8d\x06\x3f\x0a\x8f\x06\x00\x00")

func test_certsRootKeyBytes() ([]byte, error) {
	return bindataRead(
		_test_certsRootKey,
		"test_certs/root.key",
	)
}

func test_certsRootKey() (*asset, error) {
	bytes, err := test_certsRootKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/root.key", size: 1679, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _test_certsTestuserCrt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x94\x4b\xf3\x82\x36\x14\xc5\xf7\x7c\x8a\xee\x9d\x8e\x08\x8a\xb0\xe8\x22\x81\xc8\x43\x09\x6f\x04\x77\x02\x1a\x40\xe4\x25\x12\xe0\xd3\x97\xff\x7f\xd1\x99\x4e\x9b\x55\x72\x32\x39\x93\x7b\xef\x6f\xce\x9f\x3f\x0b\x22\x55\xc7\x7f\xc8\xc8\xf5\xf5\x93\x2e\x03\x1f\xfd\xaa\x8c\xa9\xeb\x0a\x54\x64\x19\x3c\x66\x02\xa8\x0e\x01\xd1\x5d\x60\x05\x56\x84\x7c\x87\x05\xc7\x62\x14\xd8\x77\x89\xd9\xbc\xbb\x8a\x54\x71\x62\xe3\xdc\xdc\xf4\x7c\x4c\x31\x70\xd0\x05\x3a\x80\x32\xe7\x05\x79\x26\x04\x2a\xd8\x05\x48\xce\x4d\xc3\xe1\xa4\xf2\xce\x1b\x63\x7c\xc5\x8d\xe9\x06\x14\xd1\x58\x09\x1d\x47\x41\x74\x52\x12\x0e\xf7\xe9\x5b\xca\x63\x8e\x10\x87\x45\x54\xcb\x53\xcc\x98\x7e\x4c\xcd\xc5\xa4\xa6\x9f\xce\xd8\x07\xf4\xba\x8a\xeb\xfe\xdf\x5a\x09\x6a\xd3\xd5\x29\x02\xbf\x66\x67\x44\xab\x7f\xcc\x98\xd5\x6d\x42\x3e\xb0\x21\xc1\x21\x04\xa6\x2f\x6b\x6e\x95\xf2\xee\x2e\xe5\xc2\x79\x2d\x0f\xea\x25\xc0\x90\xbc\xba\xfc\x55\xa8\x12\x65\xe1\xfa\xf5\x13\x00\x96\x0c\x1c\x11\xfc\xdc\x33\x32\x39\xaf\x07\x04\x3e\x56\x75\x8d\xdf\x79\x02\xf6\x96\xec\x56\x8f\x27\xbf\x3b\x7c\xbb\x73\x11\x70\x44\xec\x93\xd1\x5a\x76\x2f\xb5\xac\xde\x43\x78\xf5\xba\x43\x2d\xb4\x3c\xc5\xef\xea\xfc\xa2\x3a\x93\xc4\x8d\x47\xc6\xc6\xd8\xe6\xa9\xea\xbc\xfa\x38\x58\x50\xac\x3e\xbe\xc2\x08\xbe\xd1\x82\x1e\x4b\x0f\x1d\xef\x50\x9e\xda\x60\x4b\xb4\x36\xdc\xa3\xc3\x99\xb4\x36\xf4\x7d\x3e\xc1\x82\x21\x99\x80\xd9\x5b\x7b\x78\x9a\x96\x86\xd6\x21\x29\x7a\x0e\x8b\xd9\x8b\x83\xe6\xf4\x48\xbf\x42\x2e\x78\x57\x5e\x2a\xfa\xc7\xc9\x48\x92\x4a\xf0\xf6\xdc\xe1\x26\x9e\x2f\xcf\xe5\x90\xbb\x97\x22\xb6\xa5\xce\x90\x5d\xe6\x2a\x07\x9f\x79\x67\x27\x25\xd1\xed\x6d\xd4\x98\xa7\xa4\x18\x8f\xaa\xaa\x62\xe1\x9e\xb9\xb6\x74\xc3\x8b\x14\xec\xcd\xcb\x51\x9b\x07\x7b\xeb\x20\xc9\xb3\xbe\xf8\xe1\x74\x73\x1a\x65\x51\x03\x4b\x93\x91\xc0\x86\xf2\x66\x43\xf9\x46\xfa\x58\x8a\x10\x76\xda\xbd\x67\xf7\x21\x96\x22\x22\x68\x6c\x14\xee\xb5\x02\xe7\x97\xa8\xcd\x4e\x5a\xa4\xf1\x47\x3d\x17\xb3\x65\x43\x5d\xe7\x7b\xfd\x74\x82\xd8\x63\xe6\x24\x83\x76\xc3\xda\x1c\x49\xd2\xf9\x1e\x3d\x86\x36\xb1\xd5\xd6\xe5\xc4\x5c\x04\x5a\xe8\xe8\x0a\x70\x00\x6c\xe6\x94\x1a\x3e\xb0\x7e\x26\xa5\x39\x22\x04\x4f\x11\xad\x13\x93\xe1\x7d\x05\xe9\x17\x14\x97\xad\x20\xa0\x54\x26\xb1\x7e\xa6\x31\x84\x4e\xa0\xad\x54\xfe\x1f\x79\x0a\x21\xeb\xdb\x13\xda\x6a\x5f\x09\xc9\x4a\xf1\x62\x3e\xca\x49\x5e\xaa\x63\x65\xb5\xef\x38\x44\xb5\x17\x39\xe5\x87\x67\x63\x45\x6d\x85\x5d\x90\x6a\xc5\x32\x67\x4b\xaa\xf9\x78\x38\xb4\x53\x36\xe8\xd5\x7b\xed\xba\x2e\x58\x55\x66\xf6\x28\x76\xef\x2c\xf3\x6c\xfb\xbe\x61\xeb\x9d\x29\x6b\x83\xec\xa4\x0d\x17\x72\xdd\x63\x17\xdb\x17\x63\x29\x35\x57\x74\x0f\x3d\x7c\xfb\x02\x11\x8e\x81\x4e\x66\x9b\x1c\xcd\xf7\xed\x88\x0a\xab\x08\xc3\x31\x25\x36\xae\x99\xdc\x7b\x90\x5b\x4d\xc9\xa5\xf7\x37\x30\xfe\xd4\xe5\x78\x58\xcb\xae\xaf\x61\xa9\x7c\xf9\x0f\x71\xf9\xab\x1e\x07\x47\xc5\x4d\x63\xef\x99\xc9\xc7\x3a\x7e\x1a\xf3\x34\xde\x53\xef\x33\xb8\x69\x3a\xe8\x4c\xc9\x45\xc1\xf7\x26\x4c\x97\x7d\xb6\xad\xc7\x05\x0e\xf9\x3e\x69\x37\x09\xdf\x6c\xb7\x3c\x99\xf8\x29\xaa\xbc\xa0\x13\xa5\xf6\x62\xc4\x35\x9e\xf6\x38\x6a\x5f\x72\x62\x5a\x4b\x28\x58\x92\xd9\x6d\x23\x66\x05\x66\x1a\xf4\x24\xf2\x95\xb9\x1a\x67\xe5\xa6\x0c\x78\x3c\x01\x7e\x47\xb4\xe7\xfd\xe9\xeb\x6d\x17\xea\xb9\x77\xd8\x49\x8f\xc1\xb4\x93\x7d\x36\xde\xa7\x74\x77\x75\xdc\x91\x80\x61\x73\x87\xec\xc4\x4c\x46\xf5\x55\xe3\x91\x95\xb3\xf8\x2f\xe6\x37\x22\x10\x56\xfe\x1b\x1b\x7f\x07\x00\x00\xff\xff\x96\xb7\x7a\x60\x53\x04\x00\x00")

func test_certsTestuserCrtBytes() ([]byte, error) {
	return bindataRead(
		_test_certsTestuserCrt,
		"test_certs/testuser.crt",
	)
}

func test_certsTestuserCrt() (*asset, error) {
	bytes, err := test_certsTestuserCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/testuser.crt", size: 1107, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _test_certsTestuserKey = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x95\x37\x12\xa3\x60\x16\x06\x73\x4e\x31\x39\xb5\x85\x47\x10\xe2\xbd\xf9\xf1\x90\xe1\x84\x11\xc2\x23\xcc\xe9\x77\x76\xe2\x7d\xe9\x0b\xbe\xae\x4e\xfa\x3f\xff\x3b\x5e\x52\x34\xfb\x8f\xe7\x73\x7f\x5c\x4f\x8b\xb8\x40\xfa\x63\x48\xe9\xbf\x0f\x64\x69\x9a\x34\x9d\x1a\xcf\x71\x86\xc0\x01\x89\xdb\x9c\x21\x4e\xbf\x6d\xc1\x91\x8e\xe0\x0d\xf5\x9b\xc0\xa8\x63\x31\xba\x10\x6f\x98\xb5\xf8\x39\x0f\xf6\x51\xfa\xe1\xbb\x47\xb1\xbf\x50\x23\x3d\x13\xd0\x69\x7f\x07\xe3\x73\x6a\x45\x3a\xf9\xcd\x6f\xd2\x91\xb6\x54\xc0\x67\x4d\xc3\x47\x4a\x95\xfa\xa0\x7f\xdc\x91\x3c\x52\xfd\xac\x3c\xf0\xa9\x5e\x9e\x43\xa4\x51\xe7\x88\x94\x28\xa3\x99\x5d\x3e\x08\x20\xa2\xb0\x69\x9d\xb5\xfe\x0e\x92\xbc\x7c\x3d\xd3\x39\x46\x4d\xb7\xe2\x36\x53\x7d\x70\xde\xba\xea\xf2\xa0\x5b\xda\x8f\x09\xb6\x5b\x6b\x59\x2f\x8a\x81\xf6\x49\x9c\xca\x18\xc3\x7c\x3f\x54\xeb\x99\x50\x97\xba\xec\xa2\x0b\x5e\x2c\x84\xdb\x8d\xb9\x45\xdf\x68\x2e\x92\x4c\x96\x5c\x74\xbf\x97\xa2\x28\x36\x9d\x57\x9e\xcb\x66\xf6\xc3\x86\xa4\x65\xbe\xd4\x7b\x77\x11\x20\xb1\xbe\x73\xd8\x35\x58\x6e\xa8\x4c\xaa\x64\xe2\x7b\x8b\xe5\xe0\x93\xb0\xa6\x93\x98\xd8\xcd\x11\xe9\x68\x51\xf3\x15\x25\x23\x9b\x4d\x1a\x5a\x45\x93\x88\x54\x3b\xbb\x35\x93\xb9\x92\xd5\x44\x25\x5e\x5a\xcb\x54\x0f\x7c\x7a\x00\x3a\xe2\x6d\xa1\x99\xd5\x96\x05\x6e\x86\x51\x17\x6f\x8a\xf2\xce\x93\x7a\x9f\x0b\x57\x99\x3d\x9c\x69\x19\x4e\x8d\x80\x26\x72\x80\xe3\xb9\xe9\xaf\x6c\xb1\xf4\x1f\xdb\x69\x1f\xe0\x78\xdc\x65\x2b\x10\x81\x9c\x44\x45\xd5\xf2\x46\x4b\xf1\xc2\x3e\xd2\xdb\xc7\x37\x31\xb1\x4a\xb0\x1f\x59\x88\x03\xd1\x21\x3a\xf3\xb6\xa4\x52\x1d\x0e\x33\xef\x7e\x8d\x78\xf1\xd6\xbe\x80\xb4\x37\x1d\xdd\x3f\x07\x1c\x3a\x2e\xa9\x07\x9b\x17\x64\xef\x6f\x4b\x74\xad\xab\xa7\x28\x97\xb0\x22\x65\xd6\xbd\x06\xdb\x28\x1b\xcd\x6c\x4f\xb7\x83\xbb\x1b\x97\x67\x90\x0a\xf9\x16\xa3\xca\x01\x0b\x41\xc3\xfa\x14\x7c\x16\x06\x52\x35\x4b\x15\xf6\xeb\x45\x92\x26\x43\x46\x63\xdf\x5a\x01\xde\xe8\x84\xd9\xf8\x55\x9f\x51\x35\x7a\x88\x48\xdb\x86\xe3\xb9\x3a\x1b\xca\xa6\xba\x74\xc3\x99\x13\x37\xcd\xfb\x48\x02\xd5\xf5\x37\x1e\xba\xc6\x86\xb1\xbe\xd3\x44\xb2\xfe\x55\x63\x58\xfd\x85\x97\x79\x76\x41\xde\x68\x9f\x3b\x2c\xbf\x9a\x6a\x88\x0a\x2f\x4b\xb1\xfa\x02\x95\x24\xc4\x62\xb9\xd2\xe7\x9d\x64\x91\x75\x6b\xcf\x92\x3d\x27\x84\xf3\x44\xc2\x2b\x87\x86\xb5\xfb\x27\xf5\x43\xa9\xf4\x7a\xa9\x4c\xb4\x8e\x62\x8d\xbc\x46\x4c\x30\xd6\xf0\x58\x31\x19\xab\x84\xc2\x67\x9a\xba\x97\x89\x3a\x41\x72\xeb\x04\xff\x24\x1d\x3c\x2d\x3d\xf4\x50\xfc\x2e\x5c\x1f\xa1\x49\x25\x8e\xa6\xe5\x99\x03\xda\xca\xfc\x38\x3b\xde\xb6\x62\x73\xdc\x68\xdd\x13\x70\x3d\xfa\x12\x04\xd1\xaf\x6a\xe9\x7d\x2a\x6e\x73\x40\x8f\x5f\x59\x96\xe6\xc2\xec\x6f\x88\x1d\xc9\x31\xba\x39\xae\x45\x4f\x2b\x89\xee\x4d\x4c\x0f\xf3\xd9\xce\x55\xec\x79\xc2\x65\xb1\xfe\xef\x14\x67\x34\x44\xce\x80\x1a\xd7\x05\x8d\x14\x0f\x30\x84\xb5\xe6\x24\x9f\x9e\x6a\x25\x03\x83\xe8\x7c\xa0\xf6\xf4\xd9\xca\x0c\x89\x3d\xfb\xdc\x5c\xfd\xf2\x5d\x89\x49\xd6\xba\x50\x17\x29\xd3\x8e\xd6\xfd\xc9\xb4\xfa\x55\x50\x5b\x1b\xc1\xda\xbe\x4c\x3f\xb3\x7f\xdb\x3f\xe2\x53\xf4\x50\x48\xb6\x2b\x5a\xc1\x41\x92\xaf\x36\xf6\xb3\x4c\x6b\xbc\xc4\x07\xed\x58\x04\x08\x56\x11\x37\x57\x7e\x8e\x36\xec\x19\x2d\xf3\x72\x8b\x2d\xaf\x02\x96\x5e\x31\xfb\x6c\xda\xac\x15\xf8\x95\x8e\x28\x19\x1a\x1f\x81\x7c\x92\x2f\x7d\x4f\x54\x04\xaa\x6b\x78\xc3\xfb\xcd\xaa\x1b\x30\x27\xd8\xb6\x7b\x04\x27\x3d\x1b\xb6\xb2\x3b\xc6\x8a\xfe\xf2\x3b\xeb\x94\xcd\x80\xa8\xc1\x35\x71\x6e\x4c\x38\x28\x57\x41\x0a\xfe\x45\x4c\x9e\xc1\x60\x1f\x56\x1f\xee\x32\x88\xb0\x39\xec\xbc\xbb\x19\xa4\x61\xa6\xd0\xf6\x7f\xb7\x56\x2f\x35\xf3\x17\x99\x7b\x89\x2f\xdb\xb6\x94\xcf\xbc\x1b\x6f\xd4\xf7\x4c\xee\x71\xd6\x1e\x5a\x0f\x6a\x7b\xd1\x56\xd1\x06\xad\x2f\x88\x82\x9a\x5b\xe9\xf4\xbe\xd1\xe0\x67\x1d\x95\xea\xa5\xfa\x0c\x57\xf5\x5b\x02\xf2\x5c\x94\xc4\x46\xab\xcd\x8c\x76\x0c\xd5\x4c\xd3\x2f\x2a\xf1\x99\xbd\x60\x88\x31\xc6\x43\xd3\xfb\x5f\x41\xcc\x83\xde\x2f\x25\xed\xdc\x2c\xaa\xe5\x48\x15\x85\xfb\x6c\x96\x06\xc8\x9c\x1e\x78\xb9\x2a\x68\x5e\xbb\x89\x73\x1e\x1f\x2d\x06\x13\x12\xc5\x2d\xf4\xf2\x12\x36\x00\x7d\xfc\xdb\xa6\x1c\x37\xf8\x50\x66\x43\xf6\xed\x46\x11\xc7\x0b\x39\x0d\xbe\x91\xc6\x69\xca\xe9\x98\x0b\xa3\x56\xdb\x80\x25\x88\xe8\x3d\x5f\xb4\x3b\x84\x06\xb7\xdd\xa8\xfc\xf9\xa9\x64\x27\x8e\x04\x84\x46\x9f\xa7\x72\xa9\xaf\xe6\x75\xac\x4e\xac\xfa\x77\x1a\x91\xe0\x1d\xe8\xd7\x1e\x5e\x1e\xaf\x8f\xb8\xdd\x76\x25\xbb\x18\xc2\xf1\xd8\xad\x9c\xf1\x60\x21\xfd\x58\x55\xde\x22\x83\xea\x53\xe1\xf3\x7f\x25\x76\x71\x81\x26\x18\x01\x36\x45\x3f\x46\xa4\xd1\x49\xff\x23\xd6\xb8\xe7\x78\xc6\xd3\xe5\x7a\x31\x98\xa9\x92\x35\xd5\xc0\x0e\xd8\x4b\x47\xc2\x75\x6d\xf9\xee\x55\x24\x9c\x2b\xc3\xdc\x91\x1f\x50\x7b\x91\x2e\x37\x29\x3c\xa7\x19\xd7\x34\x84\xee\xb5\x8d\x1c\x9d\xbd\x09\x30\x60\x32\xbd\x11\x29\xfd\x1b\xd5\xd5\x42\x85\xfa\x2b\xcf\xae\x31\x0b\x9c\x64\xdb\xa4\xf7\xcd\xdc\xc5\xb5\x34\x30\x68\xd0\xc9\x7a\x16\x48\xaf\x9f\x20\xee\x1b\xdd\x35\xb3\x83\xcd\x4c\xed\x5c\x84\xba\x22\xba\x31\x3f\x5e\x5e\xb0\xda\xaf\xc3\x2b\xe7\xde\x8f\xb7\x80\x7e\xe1\x16\x09\x62\x21\xc8\x02\xf8\x18\x6e\xfa\xb0\xa0\x25\x63\x77\x20\x4a\x12\x3a\x56\x57\xcc\xa7\x82\xdc\xe2\x48\x8d\x05\x33\xd6\x89\xe9\xd4\x6d\x26\x13\xde\x19\x7c\x9d\x58\xfa\xa2\x1a\x0c\xdc\x77\x7c\x7d\x4c\xe8\x5f\x52\x24\x5b\xfc\xff\xa9\xf9\x6f\x00\x00\x00\xff\xff\x7a\x22\x95\xef\x8b\x06\x00\x00")

func test_certsTestuserKeyBytes() ([]byte, error) {
	return bindataRead(
		_test_certsTestuserKey,
		"test_certs/testuser.key",
	)
}

func test_certsTestuserKey() (*asset, error) {
	bytes, err := test_certsTestuserKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/testuser.key", size: 1675, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"test_certs/ca.crt":       test_certsCaCrt,
	"test_certs/ca.key":       test_certsCaKey,
	"test_certs/node.crt":     test_certsNodeCrt,
	"test_certs/node.key":     test_certsNodeKey,
	"test_certs/root.crt":     test_certsRootCrt,
	"test_certs/root.key":     test_certsRootKey,
	"test_certs/testuser.crt": test_certsTestuserCrt,
	"test_certs/testuser.key": test_certsTestuserKey,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"test_certs": {nil, map[string]*bintree{
		"ca.crt":       {test_certsCaCrt, map[string]*bintree{}},
		"ca.key":       {test_certsCaKey, map[string]*bintree{}},
		"node.crt":     {test_certsNodeCrt, map[string]*bintree{}},
		"node.key":     {test_certsNodeKey, map[string]*bintree{}},
		"root.crt":     {test_certsRootCrt, map[string]*bintree{}},
		"root.key":     {test_certsRootKey, map[string]*bintree{}},
		"testuser.crt": {test_certsTestuserCrt, map[string]*bintree{}},
		"testuser.key": {test_certsTestuserKey, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
